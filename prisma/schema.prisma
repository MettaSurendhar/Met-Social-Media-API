generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid())
  userName           String           @unique
  email              String           @unique
  passwordHashed     String
  registeredAt       DateTime         @default(now())
  lastLogin          DateTime         @updatedAt
  role               role             @default(BASIC)
  commentBy          Comment[]        @relation("commentedBy")
  commentOn          Comment[]        @relation("commentedOn")
  course             Course[]
  location           Location?
  post               Post[]
  profile            Profile?
  reactby            Reaction[]       @relation("reactedBy")
  reactOn            Reaction[]       @relation("reactedOn")
  saveBy             Save[]           @relation("savedBy")
  saveOn             Save[]           @relation("savedOn")
  fromUserFollowship UserFollowship[] @relation("fromUser")
  toUserFollowship   UserFollowship[] @relation("toUser")

  @@index([email, userName])
}

model UserFollowship {
  id         String   @id @default(uuid())
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUserId String
  toUserId   String
  fromUSer   User     @relation("fromUser", fields: [fromUserId], references: [id])
  toUser     User     @relation("toUser", fields: [toUserId], references: [id])
}

model Profile {
  id             String     @id @default(uuid())
  firstName      String
  middleName     String
  lastName       String
  userType       String
  departmentName String
  registerNo     Int        @unique
  birthDate      DateTime
  gender         String
  age            Int
  userId         String     @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      User       @relation(fields: [userId], references: [id])
  about          About?
  Course         Course[]
  Document       Document[]
  Image          Image[]
  Link           Link[]
  Location       Location?
}

model Location {
  id           String  @id @default(uuid())
  addressline1 String
  addressline2 String
  city         String
  state        String
  country      String
  postalcode   String
  nationality  String
  contactNo    String
  profileId    String  @unique
  userId       String  @unique
  belongsTo    Profile @relation(fields: [profileId], references: [id])
  relatedTo    User    @relation(fields: [userId], references: [id])
}

model Post {
  id              String     @id @default(uuid())
  postDescription String
  postType        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userId          String
  createdBy       User       @relation(fields: [userId], references: [id])
  about           About?
  Comment         Comment[]
  Document        Document[]
  Image           Image[]
  Link            Link[]
  Reaction        Reaction[]
  Save            Save[]
}

model Course {
  id                String   @id @default(uuid())
  courseName        String
  courseDescrpt     String
  startDate         DateTime
  endDate           DateTime
  timePeriod        Int
  instituteName     String
  instituteLocation String
  isRemote          Boolean
  profileId         String
  userId            String
  belongsTo         Profile  @relation(fields: [profileId], references: [id])
  relatedTo         User     @relation(fields: [userId], references: [id])
}

model About {
  id               String   @id @default(uuid())
  profileAbout     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isPost           Boolean
  postAbout        String
  profileId        String   @unique
  postId           String   @unique
  postBelongsTo    Post     @relation(fields: [postId], references: [id])
  profileBelongsTo Profile  @relation(fields: [profileId], references: [id])
}

model Image {
  id               String   @id @default(uuid())
  isPost           Boolean
  isBanner         Boolean
  imageExtention   String
  imageType        String
  imageValue       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  postId           String
  profileId        String
  postBelongsTo    Post     @relation(fields: [postId], references: [id])
  profileBelongsTo Profile  @relation(fields: [profileId], references: [id])
}

model Document {
  id               String   @id @default(uuid())
  isPost           Boolean
  docExtention     String
  docType          String
  docTitle         String
  docValue         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  postId           String
  profileId        String
  postBelongsTo    Post     @relation(fields: [postId], references: [id])
  profileBelongsTo Profile  @relation(fields: [profileId], references: [id])
}

model Link {
  id               String   @id @default(uuid())
  isPost           Boolean
  linkName         String
  linkUrl          String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  postId           String
  profileId        String
  postBelongsTo    Post     @relation(fields: [postId], references: [id])
  profileBelongsTo Profile  @relation(fields: [profileId], references: [id])
}

model Comment {
  id                String    @id @default(uuid())
  commentBody       String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  commentedOnId     String
  commentedById     String
  postId            String
  commentId         String
  replyOnComment    Comment   @relation("repliedOn", fields: [commentId], references: [id])
  commentedByUserId User      @relation("commentedBy", fields: [commentedById], references: [id])
  userCommentedOn   User      @relation("commentedOn", fields: [commentedOnId], references: [id])
  postCommentedOn   Post      @relation(fields: [postId], references: [id])
  comment           Comment[] @relation("repliedOn")
}

model Reaction {
  id              String   @id @default(uuid())
  reactionType    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  reactedOnId     String
  reactedById     String
  postId          String
  postReactedOn   Post     @relation(fields: [postId], references: [id])
  reactedByUserId User     @relation("reactedBy", fields: [reactedById], references: [id])
  userReactedOn   User     @relation("reactedOn", fields: [reactedOnId], references: [id])
}

model Save {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  savedById     String
  savedOnId     String
  postId        String
  postSavedOn   Post     @relation(fields: [postId], references: [id])
  savedByUserId User     @relation("savedBy", fields: [savedById], references: [id])
  userSavedOn   User     @relation("savedOn", fields: [savedOnId], references: [id])
}

enum role {
  BASIC
  ADMINK
}
