generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  userName           String        @unique
  passwordHashed     String
  registeredAt       DateTime      @default(now())
  role               role          @default(BASIC)
  emailId            String        @unique
  updatedAt          DateTime      @updatedAt
  isVerified         Boolean       @default(false)
  isSigned           Boolean       @default(false)
  commentBy          Comment[]     @relation("commentedBy")
  commentOn          Comment[]     @relation("commentedOn")
  location           Location?
  post               Post[]
  profile            Profile?
  reactby            Reaction[]    @relation("reactedBy")
  reactOn            Reaction[]    @relation("reactedOn")
  saveBy             Save[]        @relation("savedBy")
  saveOn             Save[]        @relation("savedOn")
  fromUserFollowship UserFollows[] @relation("fromUser")
  toUserFollowship   UserFollows[] @relation("toUser")

  @@index([emailId, userName])
}

model UserFollows {
  id         String   @id @default(uuid())
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUserId String
  toUserId   String
  fromUSer   User     @relation("fromUser", fields: [fromUserId], references: [id])
  toUser     User     @relation("toUser", fields: [toUserId], references: [id])

  @@unique([fromUserId, toUserId])
}

model Profile {
  id             String            @id @default(uuid())
  firstName      String
  lastName       String
  departmentName String
  registerNo     Int               @unique
  birthDate      String
  gender         String
  age            Int
  userId         String            @unique
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  userType       userType          @default(USER)
  createdBy      User              @relation(fields: [userId], references: [id])
  Course         Course[]
  Document       ProfileDocument[]
  Image          ProfileImage[]
  Link           ProfileLink[]
  Location       Location?
  about          ProfileAbout?
  Skill          Skill[]
  Work           Work[]
}

model Post {
  id              String         @id @default(uuid())
  postDescription String
  createdAt       DateTime       @default(now())
  userId          String
  postType        postType       @default(GENERAL)
  createdBy       User           @relation(fields: [userId], references: [id])
  Comment         Comment[]
  Document        PostDocument[]
  Image           PostImage[]
  Link            PostLink[]
  about           PostAbout?
  Reaction        Reaction[]
  Save            Save[]
}

model Location {
  id           String   @id @default(uuid())
  city         String
  state        String
  country      String
  nationality  String
  contactNo    String
  profileId    String   @unique @default("NULL")
  userId       String   @unique @default("NULL")
  addressLine1 String
  addressLine2 String
  postalCode   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  belongsTo    Profile  @relation(fields: [profileId], references: [id])
  relatedTo    User     @relation(fields: [userId], references: [id])
}

model Course {
  id                String   @id @default(uuid())
  courseName        String
  startDate         String
  endDate           String
  timePeriod        Int
  instituteName     String
  instituteLocation String
  isRemote          Boolean  @default(false)
  profileId         String
  courseDescription String
  createdAt         DateTime @default(now())
  belongsTo         Profile  @relation(fields: [profileId], references: [id])
}

model Work {
  id                   String   @id @default(uuid())
  workDesignation      String
  workDescription      String
  startDate            String
  endDate              String
  timePeriod           Int
  organizationName     String
  organizationLocation String
  isRemote             Boolean  @default(false)
  createdAt            DateTime @default(now())
  profileId            String
  belongsTo            Profile  @relation(fields: [profileId], references: [id])
}

model Skill {
  id                   String   @id @default(uuid())
  skillName            String
  skillLink            String
  skillRate            String
  timePeriod           Int
  organizationName     String
  organizationLocation String
  isRemote             Boolean  @default(false)
  createdAt            DateTime @default(now())
  profileId            String
  belongsTo            Profile  @relation(fields: [profileId], references: [id])
}

model PostAbout {
  id               String   @id @default(uuid())
  aboutDescription String   @default("NULL")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  postId           String   @unique
  belongsTo        Post     @relation(fields: [postId], references: [id])
}

model ProfileAbout {
  id               String   @id @default(uuid())
  aboutDescription String   @default("NULL")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  profileId        String   @unique
  belongsTo        Profile  @relation(fields: [profileId], references: [id])
}

model Comment {
  id                String   @id @default(uuid())
  commentBody       String
  createdAt         DateTime @default(now())
  commentedOnId     String
  commentedById     String
  postId            String
  commentedByUserId User     @relation("commentedBy", fields: [commentedById], references: [id])
  userCommentedOn   User     @relation("commentedOn", fields: [commentedOnId], references: [id])
  postCommentedOn   Post     @relation(fields: [postId], references: [id])
}

model Reaction {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  reactedOnId     String
  reactedById     String
  postId          String
  postReactedOn   Post     @relation(fields: [postId], references: [id])
  reactedByUserId User     @relation("reactedBy", fields: [reactedById], references: [id])
  userReactedOn   User     @relation("reactedOn", fields: [reactedOnId], references: [id])
}

model Save {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  savedById     String
  savedOnId     String
  postId        String
  postSavedOn   Post     @relation(fields: [postId], references: [id])
  savedByUserId User     @relation("savedBy", fields: [savedById], references: [id])
  userSavedOn   User     @relation("savedOn", fields: [savedOnId], references: [id])
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresIn String
  emailId   String
}

model PostDocument {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  postId       String
  docFilePath  String
  docExtention extType
  belongsTo    Post     @relation(fields: [postId], references: [id])
}

model ProfileDocument {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  profileId    String
  docFilePath  String
  docExtention extType
  belongsTo    Profile  @relation(fields: [profileId], references: [id])
}

model PostImage {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  postId        String
  imageName     String
  imageFilePath String
  imageType     imageType
  belongsTo     Post      @relation(fields: [postId], references: [id])
}

model ProfileImage {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  profileId     String
  imageName     String
  imageFilePath String
  imageType     imageType
  belongsTo     Profile   @relation(fields: [profileId], references: [id])
}

model PostLink {
  id        String   @id @default(uuid())
  linkName  String
  linkUrl   String
  createdAt DateTime @default(now())
  postId    String
  linkType  linkType
  belongsTo Post     @relation(fields: [postId], references: [id])
}

model ProfileLink {
  id        String   @id @default(uuid())
  linkName  String
  linkUrl   String
  createdAt DateTime @default(now())
  profileId String
  linkType  linkType
  belongsTo Profile  @relation(fields: [profileId], references: [id])
}

enum role {
  BASIC
  ADMIN
}

enum userType {
  USER
  STUDENT
  ALUMNI
}

enum postType {
  GENERAL
  JOB
  INTERNSHIP
  RESEARCH
  PROJECT
  BLOG
}

enum imageType {
  PROFILE
  BANNER
  COVER_POST
  POST
}

enum extType {
  PDF
  ZIP
}

enum linkType {
  PROFESSIONAL
  SOCIAL
  ACADEMIC
  GENERAL
}
