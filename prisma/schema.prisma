generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  userName           String        @unique
  emailId            String        @unique
  passwordHashed     String
  isVerified         Boolean       @default(false)
  isSigned           Boolean       @default(false)
  registeredAt       DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  role               role          @default(BASIC)
  commentBy          Comment[]     @relation("commentedBy")
  commentOn          Comment[]     @relation("commentedOn")
  location           Location?
  post               Post[]
  profile            Profile?
  reactby            Reaction[]    @relation("reactedBy")
  reactOn            Reaction[]    @relation("reactedOn")
  saveBy             Save[]        @relation("savedBy")
  saveOn             Save[]        @relation("savedOn")
  fromUserFollowship UserFollows[] @relation("fromUser")
  toUserFollowship   UserFollows[] @relation("toUser")

  @@index([emailId, userName])
}

model UserFollows {
  id         String   @id @default(uuid())
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUserId String
  toUserId   String
  fromUSer   User     @relation("fromUser", fields: [fromUserId], references: [id])
  toUser     User     @relation("toUser", fields: [toUserId], references: [id])

  @@unique([fromUserId, toUserId])
}

model Profile {
  id             String     @id @default(uuid())
  firstName      String
  lastName       String
  userType       userType   @default(USER)
  departmentName String
  registerNo     Int        @unique
  birthDate      DateTime
  gender         String
  age            Int
  userId         String     @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      User       @relation(fields: [userId], references: [id])
  about          About?
  Course         Course[]
  Document       Document[]
  Image          Image[]
  Link           Link[]
  Location       Location?
}

model Location {
  id           String   @id @default(uuid())
  addressLine1 String
  addressLine2 String
  city         String
  state        String
  country      String
  postalCode   String
  nationality  String
  contactNo    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profileId    String   @unique @default("NULL")
  userId       String   @unique @default("NULL")
  belongsTo    Profile  @relation(fields: [profileId], references: [id])
  relatedTo    User     @relation(fields: [userId], references: [id])
}

model Post {
  id              String     @id @default(uuid())
  postDescription String
  postType        postType   @default(GENERAL)
  createdAt       DateTime   @default(now())
  userId          String
  createdBy       User       @relation(fields: [userId], references: [id])
  about           About?
  Comment         Comment[]
  Document        Document[]
  Image           Image[]
  Link            Link[]
  Reaction        Reaction[]
  Save            Save[]
}

model Course {
  id                String   @id @default(uuid())
  courseName        String
  courseDescription String
  startDate         DateTime
  endDate           DateTime
  timePeriod        Int
  instituteName     String
  instituteLocation String
  isRemote          Boolean
  createdAt         DateTime @default(now())
  profileId         String
  belongsTo         Profile  @relation(fields: [profileId], references: [id])
}

model About {
  id               String   @id @default(uuid())
  aboutDescription String   @default("NULL")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isPost           Boolean
  profileId        String   @unique @default("NULL")
  postId           String   @unique @default("NULL")
  postBelongsTo    Post     @relation(fields: [postId], references: [id])
  profileBelongsTo Profile  @relation(fields: [profileId], references: [id])
}

model Image {
  id               String    @id @default(uuid())
  imageType        imageType
  imageFilePath    String
  createdAt        DateTime  @default(now())
  postId           String
  profileId        String
  postBelongsTo    Post      @relation(fields: [postId], references: [id])
  profileBelongsTo Profile   @relation(fields: [profileId], references: [id])
}

model Document {
  id               String   @id @default(uuid())
  docExtention     extType
  docType          docType
  docFilePath      String
  createdAt        DateTime @default(now())
  postId           String
  profileId        String
  postBelongsTo    Post     @relation(fields: [postId], references: [id])
  profileBelongsTo Profile  @relation(fields: [profileId], references: [id])
}

model Link {
  id               String   @id @default(uuid())
  linkType         linkType
  linkName         String
  linkUrl          String
  createdAt        DateTime @default(now())
  postId           String
  profileId        String
  postBelongsTo    Post     @relation(fields: [postId], references: [id])
  profileBelongsTo Profile  @relation(fields: [profileId], references: [id])
}

model Comment {
  id                String    @id @default(uuid())
  commentBody       String
  createdAt         DateTime  @default(now())
  commentedOnId     String
  commentedById     String
  postId            String
  commentId         String
  replyOnComment    Comment   @relation("repliedOn", fields: [commentId], references: [id])
  commentedByUserId User      @relation("commentedBy", fields: [commentedById], references: [id])
  userCommentedOn   User      @relation("commentedOn", fields: [commentedOnId], references: [id])
  postCommentedOn   Post      @relation(fields: [postId], references: [id])
  comment           Comment[] @relation("repliedOn")
}

model Reaction {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  reactedOnId     String
  reactedById     String
  postId          String
  postReactedOn   Post     @relation(fields: [postId], references: [id])
  reactedByUserId User     @relation("reactedBy", fields: [reactedById], references: [id])
  userReactedOn   User     @relation("reactedOn", fields: [reactedOnId], references: [id])
}

model Save {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  savedById     String
  savedOnId     String
  postId        String
  postSavedOn   Post     @relation(fields: [postId], references: [id])
  savedByUserId User     @relation("savedBy", fields: [savedById], references: [id])
  userSavedOn   User     @relation("savedOn", fields: [savedOnId], references: [id])
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresIn String
  emailId   String
}

enum role {
  BASIC
  ADMIN
}

enum userType {
  USER
  STUDENT
  ALUMNI
}

enum postType {
  GENERAL
  JOB
  INTERNSHIP
  RESEARCH
  PROJECT
  BLOG
}

enum imageType {
  PROFILE
  BANNER
  COVERPOST
  POST
}

enum extType {
  APPLICATION
  ZIP
}

enum docType {
  POST
  PROFILE
}

enum linkType {
  POST
  PROFILE
}

// npx prisma migrate dev
// update_7_0
// npx prisma generate
// npm run db-push
